/**
 * Moreu API
 * This is a moreu server.
 *
 * OpenAPI spec version: 1.0
 * Contact: saltbo@foxmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";
import HttputilJSONResponse from '../model/HttputilJSONResponse';

/**
* Configs service.
* @module api/ConfigsApi
* @version 1.0
*/
export default class ConfigsApi {

    /**
    * Constructs a new ConfigsApi. 
    * @alias module:api/ConfigsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * 删除配置项
     * 根据键名删除配置项
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/HttputilJSONResponse} and HTTP response
     */
    configsKeyDeleteWithHttpInfo(key) {
      let postBody = null;

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = HttputilJSONResponse;

      return this.apiClient.callApi(
        '/configs/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 删除配置项
     * 根据键名删除配置项
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/HttputilJSONResponse}
     */
    configsKeyDelete(key) {
      return this.configsKeyDeleteWithHttpInfo(key)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 获取配置项
     * 根据键名获取配置项
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/HttputilJSONResponse} and HTTP response
     */
    configsKeyGetWithHttpInfo(key) {
      let postBody = null;

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = HttputilJSONResponse;

      return this.apiClient.callApi(
        '/configs/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 获取配置项
     * 根据键名获取配置项
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/HttputilJSONResponse}
     */
    configsKeyGet(key) {
      return this.configsKeyGetWithHttpInfo(key)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 修改配置项
     * 根据键名修改配置项
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/HttputilJSONResponse} and HTTP response
     */
    configsKeyPutWithHttpInfo(body, key) {
      let postBody = body;

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = HttputilJSONResponse;

      return this.apiClient.callApi(
        '/configs/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 修改配置项
     * 根据键名修改配置项
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/HttputilJSONResponse}
     */
    configsKeyPut(body, key) {
      return this.configsKeyPutWithHttpInfo(body, key)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

}
